@using CsvHelper
@using CsvHelper.Configuration
@using DataSure.Components.Elements.Notification
@using DataSure.Contracts.AdminService
@using DataSure.Contracts.HelperServices
@using DataSure.Helper
@using DataSure.Models.AdminModel
@using DataSure.Models.NotificationModel
@using DataSure.Service.HelperServices
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using System.Globalization
@using System.Diagnostics
@using System.Text
@using System.Data
@inject IEntitiyConfigService entityConfigService
@inject IValidationService validationService
@inject IFileOperationService fileOperationService
@inject INotificationService NotificationService

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <div class="scrollable-tabs-container">
            <div class="scrollable-tabs">
                @foreach (var entity in entities)
                {
                    <button class="btn btn-outline-secondary me-2 @(selectedEntity.FileName == entity.FileName ? "active-tab" : "")"
                    @onclick="() => TabClicked(entity)">
                        @entity.Name
                    </button>
                }
            </div>
        </div>
    </div>
</nav>

@if (!string.IsNullOrEmpty(selectedEntity?.FileName))
{
    <div>
        <InputFile OnChange="HandleFileSelected" accept=".csv, .xlsx" />
    </div>

    <ValidationMessages />

}

@code {

    private EntityConfigModel? selectedEntity;
    private List<EntityConfigModel> entities = new();
    private List<Dictionary<string, string>> fileData = new(); // Holds parsed file data for display
    private DataTable importedDataTable { get; set; }

    [Parameter]
    public string FileName { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        entities = await entityConfigService.GetListByFileName<EntityConfigModel>(FileName);
        selectedEntity = entities.FirstOrDefault();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        string notificationMsg = string.Empty;
        if (!string.IsNullOrEmpty(selectedEntity?.FileName))
        {
            var properties = await entityConfigService.GetListByFileName<PropertyConfigModel>(selectedEntity?.FileName);

            var file = e.File;
            if (file != null)
            {
                NotificationService.ClearMessages();

                /* Done
                * check the uploaded file is csv
                * convert into datatable
                * check if required columns are present
                 */

                var fileExtension = Path.GetExtension(file.Name);

                if(fileExtension.ToLower() != ".csv")
                {
                    NotificationService.NotifyUser("Only csv is supported, aborting operation.", MessageType.Error, 100);
                }

                importedDataTable = await fileOperationService.ConvertCsvToDataTableAsync(file);

                if (importedDataTable?.Rows?.Count == 0)
                {

                }

                var headerErrorList = await validationService.ValidateImportedHeadersAsync(importedDataTable, properties);

                if (headerErrorList?.Count > 0)
                {
                    NotificationService.NotifyUser("Please resolve the errors and try again.", MessageType.Error, 100);
                }
                else{
                    NotificationService.NotifyUser("CSV headers validated.", MessageType.Success, 5);
                }

                // await Task.Delay(1000);
                // NotificationService.NotifyUser("Testing 1 second wait.", MessageType.Success, 10);

                // await Task.Delay(1000);
                // NotificationService.NotifyUser("Testing 1 second wait.", MessageType.Success, 15);

                // await Task.Delay(1000);
                // NotificationService.NotifyUser("Testing 1 second wait.", MessageType.Success, 20);

                // await Task.Delay(1000);
                // NotificationService.NotifyUser("Testing 1 second wait.", MessageType.Success, 25);

                await validationService.ValidateDataTableAsync(importedDataTable, properties);


                /*
                 * Validate DataTable agaisnt the PropertyConfig, add errors column and add error if present
                 * If errors present, convert datatable to csv and download the file
                 * If no error, insert into table in SQLLite
                 */

            }
        }
    }

    private void TabClicked(EntityConfigModel entityConfig)
    {
        selectedEntity = entityConfig;
    }

}